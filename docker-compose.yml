version: '3'

services:
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./conf/nginx/test/chat/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server1
      - server2
      - chat1
      - chat2
    networks:
      - app-network

  server1:
    build: ./api-gateway
    container_name: server1
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    depends_on:
      - redis
    networks:
      - app-network
    
  server2:
    build: ./api-gateway
    container_name: server2
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    depends_on:
      - redis
    networks:
      - app-network
  
  chat1:
    build: ./chat-service
    container_name: chat1
    environment:
      - STREAM_NAME=chat-stream
      - GROUP_NAME=chat-group
      - CONSUMER_NAME=chat-consumer1
      - PUBLISH_CHANNEL=chat-channel
      - REDIS_ADDR=redis:6379
      - MONGODB_URI=mongodb://mongo:27017
      - GRPC_PORT=50051
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - app-network
  
  chat2:
    build: ./chat-service
    container_name: chat2
    environment:
      - STREAM_NAME=chat-stream
      - GROUP_NAME=chat-group
      - CONSUMER_NAME=chat-consumer2
      - PUBLISH_CHANNEL=chat-channel
      - REDIS_ADDR=redis:6379
      - MONGODB_URI=mongodb://mongo:27017
      - GRPC_PORT=50052
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - app-network

volumes:
  redis-data:
  mongo-data:

networks:
  app-network:
    driver: bridge
    name: app-network
