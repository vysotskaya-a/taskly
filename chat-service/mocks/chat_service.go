// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/grpc/handlers/chat.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	entity "chat-service/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// AddUserToChat mocks base method.
func (m *MockChatService) AddUserToChat(ctx context.Context, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChat", ctx, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChat indicates an expected call of AddUserToChat.
func (mr *MockChatServiceMockRecorder) AddUserToChat(ctx, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChat", reflect.TypeOf((*MockChatService)(nil).AddUserToChat), ctx, userID, projectID)
}

// CreateChat mocks base method.
func (m *MockChatService) CreateChat(ctx context.Context, chat *entity.Chat) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatServiceMockRecorder) CreateChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatService)(nil).CreateChat), ctx, chat)
}

// DeleteChat mocks base method.
func (m *MockChatService) DeleteChat(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatServiceMockRecorder) DeleteChat(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatService)(nil).DeleteChat), ctx, projectID)
}

// GetChat mocks base method.
func (m *MockChatService) GetChat(ctx context.Context, projectID string) (*entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, projectID)
	ret0, _ := ret[0].(*entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatServiceMockRecorder) GetChat(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatService)(nil).GetChat), ctx, projectID)
}

// GetChatUsers mocks base method.
func (m *MockChatService) GetChatUsers(ctx context.Context, projectID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatUsers", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatUsers indicates an expected call of GetChatUsers.
func (mr *MockChatServiceMockRecorder) GetChatUsers(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatUsers", reflect.TypeOf((*MockChatService)(nil).GetChatUsers), ctx, projectID)
}

// GetMessages mocks base method.
func (m *MockChatService) GetMessages(ctx context.Context, userID, projectID string, limit, cursor int) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, userID, projectID, limit, cursor)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatServiceMockRecorder) GetMessages(ctx, userID, projectID, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatService)(nil).GetMessages), ctx, userID, projectID, limit, cursor)
}

// GetUserChats mocks base method.
func (m *MockChatService) GetUserChats(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatServiceMockRecorder) GetUserChats(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatService)(nil).GetUserChats), ctx, userID)
}

// RemoveUserFromChat mocks base method.
func (m *MockChatService) RemoveUserFromChat(ctx context.Context, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChat", ctx, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChat indicates an expected call of RemoveUserFromChat.
func (mr *MockChatServiceMockRecorder) RemoveUserFromChat(ctx, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChat", reflect.TypeOf((*MockChatService)(nil).RemoveUserFromChat), ctx, userID, projectID)
}

// UpdateChat mocks base method.
func (m *MockChatService) UpdateChat(ctx context.Context, projectID string, chat *entity.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", ctx, projectID, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockChatServiceMockRecorder) UpdateChat(ctx, projectID, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockChatService)(nil).UpdateChat), ctx, projectID, chat)
}
